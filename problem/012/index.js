/**
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */

class Factorizer {
  constructor() {
    this.primeFactors = [2]
  }

  addPrime() {
    let i = this.primeFactors.slice(-1)[0] + 1;

    while (this.primeFactors.find(n => i % n === 0)) i++

    return this.primeFactors.push(i)
  }

  primeFactorize(n) {
    const result = []

    while (!this.primeFactors.includes(n)) {
      const lpf = this.primeFactors.find(f => n % f === 0)

      if (!lpf) {
        this.addPrime()
      } else {
        result.push(lpf)
        n = n / lpf
      }
    }

    result.push(n)

    return result.sort()
  }

  totalFactors(n) {
    return Object
      .values(this.primeFactorize(n).reduce((factors, f) => {
        if (!factors[f]) {
          factors[f] = 1
        } else {
          factors[f]++
        }

        return factors
      }, {}))
      .reduce((prod, f) => prod * (f + 1), 1)
  }
}

const factorizer = new Factorizer()

let i = 28, j = 7
while (factorizer.totalFactors(i) < 500) i += ++j;

console.log(i)


